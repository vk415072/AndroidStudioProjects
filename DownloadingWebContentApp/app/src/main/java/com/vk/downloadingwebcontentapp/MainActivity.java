package com.vk.downloadingwebcontentapp;

import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.util.concurrent.ExecutionException;

public class MainActivity extends AppCompatActivity {

        //AsyncTask provides the functionality to run the code in a different threat to the main thread.
        //it takes 3 variables:
        //1.String = the type of variable that we're gong to send to this class (DownloadTask), here we're sending the URL.
        //2.Void = is the name of the method that we may or may not use to show the progress of the task but we're not using suc method so we used void.
        //3.String = this third variable type is the return type by the DownloadTask.
    public class DownloadTask extends AsyncTask<String, Void, String>{

        @Override
        protected String doInBackground(String... strings) {
                //we can approach the 'varargs' (info given below) just like an array.
            Log.i("LOG URL", strings[0]);
                //this string will contain all the HTML content of youtube.com
            String result = null;
                //this variable is basically a string but it holds only the right format of the URLs.
            URL url;
                //here HttpURLConnection here is like a browser. so we're kind of opening a browser here and use it to fetch the content of the url variable.
            HttpURLConnection httpURLConnection = null;

                //as an error can occur if the URL is not of the correct format so we've used a try & catch method here.
            try{
                url = new URL(strings[0]);
                    //now to setup a connection with our URL, we use openConnection() method and store it in the httpURLConnection.
                httpURLConnection = (HttpURLConnection) url.openConnection();
                    //InputStream is a stream to hold the input of data adn getInputStream() is used to get that data.
                InputStream inputStream = httpURLConnection.getInputStream();
                    //now that data is stored in the inputStream, we've now to read that data so, InputStreamReader could store that.
                    //and we've passed the inputStream in it.
                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);

                    //with this loop data will count through 1,2,3... while its reading characters through the contents of the URL.
                    //once it get to the end it'll have the value of -1.
                int data = inputStreamReader.read();
                    while(data != -1){
                            //downloading current character from the stream/URL.
                        char current = (char)data;
                            //appending that to the result.
                        result += current;
                            //finally we tell data to move on to the next character.
                        data = inputStreamReader.read();
                    }
                    return result;
            }catch (Exception e){
                e.printStackTrace();
                return "Failed!";
            }

        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        DownloadTask downloadTask = new DownloadTask();

        String result = null;
            //the try & catch method is auto generated by the android studio.
        try {
                //we can execute the whole class with execute() method.
                //here we're sending the youtube.com as an String that is being stored in an array named strings in the parameters of AsyncTask.
                //String... is more or less a array but it is called "varargs".
                //varargs allows us to add two or more URLs.
                //the get() method helps to get the returned data from the class that's object (downloadTask) is called.
            result = downloadTask.execute("https://www.ecowebhosting.co.uk").get();
        } catch (ExecutionException e) {
                //printStackTrace() is a java method that provides all the info about the error or the exception that may occur.
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
            //logging the String i.e, result that contains the string that is returned by the DownloadTask Class.
        Log.i("LOG Result", result);
    }
}
